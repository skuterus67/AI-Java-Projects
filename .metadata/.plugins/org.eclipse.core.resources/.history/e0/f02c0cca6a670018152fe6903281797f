package boardGame;

public class Gomoku {

	public int[][] board = new int[15][15];
	public int possibleMoves = 0;
	public int winner = 0;
	
	Gomoku(){
		for(int i=0; i<this.board.length; i++){
			for(int j=0; j<this.board.length; j++){
				board[i][j] = 0;
				possibleMoves++;
			}
		}
	}
	
	public void setStone(int row, int column, boolean startingPlayer){
		if(startingPlayer)
			board[row][column] = 1;
		else
			board[row][column] = -1;
		possibleMoves--;
	}
	
	public void takeStone(int row, int column){
		board[row][column] = 0;
		possibleMoves++;
	}
	
	public int getStone(int row, int column){
		if(row < 0 || column < 0 || row >= this.board.length || column >= this.board.length){\
			return -2;
		}
		else
			return this.board[row][column];
	}
	
	public boolean checkForWin(int row, int column, int player){
		if(this.checkForWinRow(row, column, player) || this.checkForWinColumn(row, column, player) || this.checkForWinDiagonal(row, column, player)){
			winner = player;
			return true;
		}
		else
			return false;
	}
	
	public boolean checkForWinRow(int row, int column, int player){
		int cnt = 0;
		for(int i=0; i<this.board.length; i++){
			if(this.getStone(i, column) == player){
				cnt++;
			}
			else
				cnt = 0;
			if(cnt == 5)
				return true;
		}
		return false;
	}
	
	public boolean checkForWinColumn(int row, int column, int player){
		int cnt = 0;
		for(int i=0; i<this.board.length; i++){
			if(this.getStone(row, i) == player){
				cnt++;
			}
			else
				cnt = 0;
			if(cnt == 5)
				return true;
		}
		return false;
	}
	
	public boolean checkForWinDiagonal(int row, int column, int player){
		return this.checkDiagonalRight(row, column, player) || this.checkDiagonalLeft(row, column, player);
	}
	
	public boolean checkDiagonalRight(int row, int column, int player){
		int startingRow = row;
		int startingColumn = column;
		while(startingRow < 0 && startingColumn < 0){
			startingRow--;
			startingColumn--;
		}
		int cnt = 0;
		for(int i=startingRow, j=startingColumn; i<this.board.length && j<this.board.length; i++, j++){
			if(this.getStone(i, j) == player){
				cnt++;
			}
			else
				cnt = 0;	
			if(cnt == 5)
				return true;
		}
		return false;
	}
	
	public boolean checkDiagonalLeft(int row, int column, int player){
		int startingRow = row;
		int startingColumn = column;
		while(startingRow < 0 && startingColumn < this.board.length){
			startingRow--;
			startingColumn++;
		}
		int cnt = 0;
		for(int i=startingRow, j=startingColumn; i<this.board.length && j>0; i++, j--){
			if(this.getStone(i, j) == player){
				cnt++;
			}
			else
				cnt = 0;	
			if(cnt == 5)
				return true;
		}
		return false;
	}
	
	public static void main (String[] args){
		Gomoku game = new Gomoku();
		game.setStone(0, 0, true);
		System.out.println(game.checkForWin(0,0,1));
		game.setStone(1, 1, true);
		System.out.println(game.checkForWin(1,1,1));
		game.setStone(2, 2, true);
		System.out.println(game.checkForWin(2,2,1));
		game.setStone(3, 3, true);
		System.out.println(game.checkForWin(3,3,1));
		game.setStone(4, 4, true);
		System.out.println(game.checkForWin(4,4,1));
	}
	
}
