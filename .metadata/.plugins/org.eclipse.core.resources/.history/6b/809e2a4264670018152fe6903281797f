package boardGame;

import java.util.Stack;

public class Minimax {

//	
//	01 function minimax(node, depth, maximizingPlayer)
//	02     if depth = 0 or node is a terminal node
//	03         return the heuristic value of node
//
//	04     if maximizingPlayer
//	05         bestValue := -inf
//	06         for each child of node
//	07             v := minimax(child, depth - 1, FALSE)
//	08             bestValue := max(bestValue, v)
//	09         return bestValue
//
//	10     else    (* minimizing player *)
//	11         bestValue := +inf
//	12         for each child of node
//	13             v := minimax(child, depth - 1, TRUE)
//	14             bestValue := min(bestValue, v)
//	15         return bestValue
//	
	
	public Stack<Pylos> gameCopies;
	
	public double minimax(Pylos game, Node node, int depth, boolean maximizingPlayer){
		if(depth == 0 || node.children.length == 0){
			if(maximizingPlayer){
				node.performMove(game);
				return node.calculateValue(game, 1);
			}
			else{
				node.performMove(game);
				return node.calculateValue(game, -1);
			}
		}
		if(maximizingPlayer){
			double bestValue = Double.NEGATIVE_INFINITY;
			for(Node child : node.children){
				child.performMove(game);
				this.gameCopies.push(game);
				double v = this.minimax(game, child, depth-1, false);
				this.gameCopies.pop();
				bestValue = Math.max(bestValue, v);
			}
			return bestValue;
		}
		else{
			double bestValue = Double.POSITIVE_INFINITY;
			for(Node child : node.children){
				child.performMove(game);
				this.gameCopies.push(game);
				double v = this.minimax(game, child, depth-1, true);
				this.gameCopies.pop();
				bestValue = Math.min(bestValue, v);
			}
			return bestValue;
		}
	}
	
	
//	01 function alphabeta(node, depth, alpha, beta, maximizingPlayer) is
//	02     if depth = 0 or node is a terminal node then
//	03         return the heuristic value of node
//	04     if maximizingPlayer then
//	05         v := -inf
//	06         for each child of node do
//	07             v := max(v, alphabeta(child, depth – 1, alpha, beta, FALSE))
//	08             alpha := max(alpha, v)
//	09             if beta <= alpha then
//	10                 break (* beta cut-off *)
//	11         return v
//	12     else
//	13         v := +inf
//	14         for each child of node do
//	15             v := min(v, alphabeta(child, depth – 1, alpha, beta, TRUE))
//	16             beta := min(beta, v)
//	17             if beta <= alpha then
//	18                 break (* alpha cut-off *)
//	19         return v
	
	
	public double alphaBeta(Pylos game, Node node, int depth, int alpha, int beta, boolean maximizingPlayer){
		if(depth == 0 || node.children.length == 0){
			if(maximizingPlayer){
				node.performMove(game);
				return node.calculateValue(game, 1);
			}
			else{
				node.performMove(game);
				return node.calculateValue(game, -1);
			}
		}
		if(maximizingPlayer){
			double v = Double.NEGATIVE_INFINITY;
			for(Node child : node.children){
				child.performMove(game);
				this.gameCopies.push(game);
				v = Math.max(v, this.alphaBeta(game, child, depth-1, alpha, beta, false));
				this.gameCopies.pop();
				alpha = Math.max(alpha, (int)v);
				if(beta <= alpha)
					break;
			}
			
			return v;
		}
		else{
			double v = Double.POSITIVE_INFINITY;
			for(Node child : node.children){
				child.performMove(game);
				this.gameCopies.push(game);
				v = Math.min(v, this.alphaBeta(game, child, depth-1, alpha, beta, true));
				this.gameCopies.pop();
				alpha = Math.min(beta, (int)v);
				if(beta <= alpha)
					break;
			}
			return v;
		}
	}
}

class Node {
	Node parent;
	Node[] children;
	int value;
	int numberOfMoves = 0;
	int movesPlacing = 0;
	int movesMoving = 0;
	boolean canTake;
	
	int[][] arrayOfEmptyPlaces = new int[30][3];
	int[][] arrayOfFreeBalls = new int[30][3];
	int[][] arrayOfMovements = new int[900][6];
	
	boolean startingPlayer;
	
	boolean moving;
	boolean taking1;
	boolean taking2;
	
	int fromLevel = -2;
	int fromRow = -2;
	int fromColumn = -2;
	int toLevel = -2;
	int toRow = -2;
	int toColumn = -2;
	
	Node(Node parent, boolean startingPlayer, boolean moving, boolean taking1,
			boolean taking2, int fromLevel, int fromRow, int fromColumn, int toLevel, int toRow, int toColumn){
		this.parent = parent;
		this.startingPlayer = startingPlayer;
		this.moving = moving;
		this.taking1 = taking1;
		this.taking2 = taking2;
		this.fromLevel = fromLevel;
		this.fromRow = fromRow;
		this.fromColumn = fromColumn;
		this.toLevel = toLevel;
		this.toRow = toRow;
		this.toColumn = toColumn;
	}
	
	public void performMove(Pylos game){
		if(this.moving){
			game.moveBall(this.fromLevel, this.fromRow, this.fromColumn, this.toLevel, this.toRow, this.toColumn, this.startingPlayer);
		}
		else if(this.taking1){
			game.takeBall(this.fromLevel, this.fromRow, this.fromColumn, this.startingPlayer);
		}
		else if(this.taking2){
			game.takeBall(this.fromLevel, this.fromRow, this.fromColumn, this.startingPlayer);
			game.takeBall(this.toLevel, this.toRow, this.toColumn, this.startingPlayer);
		}
		else if(!this.taking1 && !this.taking2 && !this.moving){
			game.placeBall(this.toLevel, this.toRow, this.toColumn, this.startingPlayer);
		}
	}
	
	public void countPossibleMovesPlacing(Pylos game, int player){
		int cnt = 0;
		for(int height=0; height<game.board.size(); height++){
			for(int i=0; i<game.board.get(height).length; i++){
				for(int j=0; j<game.board.get(height).length; j++){
					game.checkBoardForMoving(height, i, j);
					if(game.getBall(height, i, j) == 0){
						this.numberOfMoves++;
						this.movesPlacing++;
						this.arrayOfEmptyPlaces[cnt][0] = height;
						this.arrayOfEmptyPlaces[cnt][1] = i;
						this.arrayOfEmptyPlaces[cnt][2] = j;
						cnt++;
					}
				}
			}
		}
	}
	
	public void countPossibleMovesTaking(Pylos game, int player){
		for(int height=0; height<game.board.size(); height++){
			for(int i=0; i<game.board.get(height).length; i++){
				for(int j=0; j<game.board.get(height).length; j++){
					if(game.checkForTaking(height, i, j, player)){
						this.canTake = true;
					}
				}
			}
		}
		this.numberOfMoves += this.countFreeBalls(game) * (this.countFreeBalls(game) - 1);
	}
	
	public int countFreeBalls(Pylos game){
		int cnt = 0;
		for(int height=0; height<game.board.size(); height++){
			for(int i=0; i<game.board.get(height).length; i++){
				for(int j=0; j<game.board.get(height).length; j++){
					if(!game.hasAbove(height, i, j)){
						this.arrayOfFreeBalls[cnt][0] = height;
						this.arrayOfFreeBalls[cnt][1] = i;
						this.arrayOfFreeBalls[cnt][2] = j;
						cnt++;
					}
				}
			}
		}
		return cnt;
	}
	
	public void countPossibleMovesMoving(Pylos game, int player){
		int cnt = 0;
		for(int height=0; height<game.board.size(); height++){
			for(int i=0; i<game.board.get(height).length; i++){
				for(int j=0; j<game.board.get(height).length; j++){
					if(!game.hasAbove(height, i, j)){
						game.takeBall(height, i, j, this.startingPlayer);
						game.checkForAbsentBase(height, i, j);
						for(int height2=height; height<game.board.size(); height2++){
							for(int i2=0; i<game.board.get(height2).length; i2++){
								for(int j2=0; j<game.board.get(height2).length; j2++){
									if(game.getBall(height2, i2, j2) == 0){
										this.numberOfMoves++;
										this.movesMoving++;
										this.arrayOfMovements[cnt][0] = height;
										this.arrayOfMovements[cnt][1] = i;
										this.arrayOfMovements[cnt][2] = j;
										this.arrayOfMovements[cnt][3] = height2;
										this.arrayOfMovements[cnt][4] = i2;
										this.arrayOfMovements[cnt][5] = j2;
										cnt++;
									}
								}
							}
						}
						game.placeBall(height, i, j, this.startingPlayer);
						game.checkBoardForMoving(height, i, j);
					}
				}
			}
		}
	}
	
	public void createPossibleMoves(Pylos game, int player){
		this.countPossibleMovesPlacing(game, player);
		this.countPossibleMovesTaking(game, player);
		this.countPossibleMovesMoving(game, player);
		int freeBalls = this.countFreeBalls(game);
		this.children = new Node[this.numberOfMoves];
		for(int i=0; i<this.numberOfMoves; i++){
			if(i < this.movesPlacing){
				this.children[i] = new Node(this, !this.startingPlayer, false, false, false, 
						this.arrayOfEmptyPlaces[i][0], this.arrayOfEmptyPlaces[i][1], this.arrayOfEmptyPlaces[i][2], 0, 0, 0);
			}
			else if(i > this.movesPlacing && i < this.movesPlacing + this.movesMoving){
				this.children[i] = new Node(this, !this.startingPlayer, true, false, false, 
						this.arrayOfMovements[i-this.movesPlacing][0], this.arrayOfMovements[i-this.movesPlacing][1], this.arrayOfMovements[i-this.movesPlacing][2], 
						this.arrayOfMovements[i-this.movesPlacing][3], this.arrayOfMovements[i-this.movesPlacing][4], this.arrayOfMovements[i-this.movesPlacing][5]);
			}
			else if(i < this.movesPlacing + this.movesMoving + freeBalls){
				int j =0;
				this.children[i] = new Node(this, !this.startingPlayer, false, true, false, 
					this.arrayOfFreeBalls[j][0], this.arrayOfFreeBalls[j][1], this.arrayOfFreeBalls[j][2], 0, 0, 0);
				j++;
			}
			else if(i < this.numberOfMoves){
				for(int j=0; j<freeBalls; j++){
					for(int k=j; k<freeBalls; k++){
						this.children[i + j + k] = new Node(this, !this.startingPlayer, false, true, false, 
								this.arrayOfFreeBalls[j][0], this.arrayOfFreeBalls[j][1], this.arrayOfFreeBalls[j][2],
								this.arrayOfFreeBalls[k][0], this.arrayOfFreeBalls[k][1], this.arrayOfFreeBalls[k][2]);
					}
				}
			}
		}
	}
	
	public double calculateValue(Pylos game, int player){ // pilnuj, ¿eby zabranie jednej z kulek tworz¹cych kwadrat by³o lepiej punktowane
		int value = 0;
		if(game.gameOver && game.winner == player)
			return Double.POSITIVE_INFINITY;
		else if(game.gameOver && game.winner != player)
			return Double.NEGATIVE_INFINITY;
		if(!this.moving && !this.taking1 && !this.taking2){
			//check if creating a pattern, otherwise return 0
			int cnt = 0;
			for(int height=0; height<game.board.size(); height++){
				for(int i=0; i<game.board.get(height).length; i++){
					for(int j=0; j<game.board.get(height).length; j++){
						if(!game.hasAbove(height, i, j)){
							cnt++;
						}
						if(game.board.get(height)[i][j] == 0 && height > 0 && cnt != 0){
							value += -5 * cnt;
						}
					}
				}
			}
			value = 0;
		}
		else if(this.moving){
			value += 5;
		}
		else if(this.taking1){
			value += 15;
		}
		return value;
	}
}
